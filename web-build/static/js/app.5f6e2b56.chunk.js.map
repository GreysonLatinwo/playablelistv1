{"version":3,"sources":["global.js","PlayableContract.js","App.js","index.js"],"names":["global","Buffer","require","process","btoa","str","toString","atob","b64Encoded","PlayableJson","ethers","signer","providers","Web3Provider","window","ethereum","getSigner","playableContract","Contract","networks","address","abi","Playlist","props","state","playlist","accounts","playableAddress","request","method","then","responseAccount","setCookie","location","hash","urlParams","split","length","spotifyAuth","cname","name","ca","decodeURIComponent","document","cookie","i","c","charAt","substring","indexOf","cvalue","seconds","d","Date","setTime","getTime","expires","toUTCString","url","origin","encodeURIComponent","href","GetAll","result","JsonResult","JSON","parse","sort","a","b","parseInt","setState","console","log","this","updatePlaylist","utils","id","on","filters","playlistAltered","event","searchValue","searchLimit","fetch","spotifysearchURL","headers","getCookie","response","json","searchResults","trackInfo","AddSong","value","catch","error","playlistIdx","stringify","body","responseJson","warn","Fragment","View","style","styles","container","Button","onPress","title","color","map","currIdx","songID","trackName","albumImage","trackURI","artist","key","TouchableOpacity","accessibilityRole","linkContainer","SpotifyPlay","Image","tinyLogo","source","uri","Text","separator","React","Component","StyleSheet","create","marginTop","paddingHorizontal","backgroundColor","width","height","flexWrap","flexDirection","justifyContent","alignItems","paddingVertical","link","flex","fontSize","fontWeight","textAlign","App","playlistAddres","updateAddress","addressinput","onChangeText","placeholder","card","borderRadius","buttonContainer","padding","marginVertical","buttonText","registerRootComponent"],"mappings":"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","file":"static/js/app.5f6e2b56.chunk.js","sourcesContent":["// Inject node globals into React Native global scope.\r\nglobal.Buffer = require('buffer').Buffer;\r\nglobal.process = require('process');\r\n\r\nif (typeof btoa === 'undefined') {\r\n  global.btoa = function (str) {\r\n    return new Buffer(str, 'binary').toString('base64');\r\n  };\r\n}\r\n\r\nif (typeof atob === 'undefined') {\r\n  global.atob = function (b64Encoded) {\r\n    return new Buffer(b64Encoded, 'base64').toString('binary');\r\n  };\r\n}","import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image, Button } from \"react-native\";\r\nimport './global';\r\n\r\nconst PlayableJson = require('./PlayableList.json');\r\nconst Web3 = require('web3');\r\nconst { ethers } = require(\"ethers\");\r\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\r\nconst signer = provider.getSigner(); //signer is the address on the metamask account\r\nconst playableContract = new ethers.Contract(PlayableJson.networks['3'].address, PlayableJson.abi, signer);\r\n\r\nclass Playlist extends React.Component {\r\n    \r\n    getCookie(cname) {\r\n        var name = cname + \"=\";\r\n        var decodedCookie = decodeURIComponent(document.cookie);\r\n        var ca = decodedCookie.split(';');\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) == ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) == 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n      \r\n    setCookie(cname, cvalue, seconds) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (seconds * 1000));\r\n        var expires = \"expires=\" + d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n    spotifyAuth() {\r\n        const my_client_id = '9c51eed9e4534dc3b3711c58b43c13c9';\r\n        const scopes = `playlist-read-collaborative \r\n                playlist-read-private \r\n                playlist-modify-private \r\n                playlist-modify-public \r\n                streaming \r\n                user-read-email \r\n                user-read-private \r\n                user-modify-playback-state\r\n                user-read-playback-state\r\n                ugc-image-upload`;\r\n        const redirect_uri = window.location.origin;\r\n        const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${my_client_id}&redirect_uri=${(redirect_uri)}&scope=${encodeURIComponent(scopes)}`\r\n        window.location.href = url;\r\n    }\r\n    updatePlaylist(){\r\n        playableContract.GetAll('0xA54B25a1EA558512DEF1adD7b2b301c16051C065')\r\n        .then((result) => {\r\n            var JsonResult = JSON.parse(result);\r\n            JsonResult.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            this.state.playlist = JsonResult;\r\n            this.setState(JsonResult);\r\n            console.log('ethers');\r\n            console.log(this.state.playlist);\r\n        });\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // Don't call this.setState() here!\r\n        this.state = {\r\n            playlist: [],\r\n            accounts: [],\r\n            playableAddress: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065'\r\n        };\r\n        ethereum.request({ method: 'eth_requestAccounts' })\r\n        .then((responseAccount) => {\r\n            this.state.accounts = responseAccount\r\n        });\r\n        this.setCookie('PlaylistAddress', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', 3600)\r\n        if (!window.location.hash){\r\n            this.spotifyAuth();\r\n        }else{\r\n            const urlParams = window.location.hash.split('&');\r\n            if(urlParams.length >= 3)\r\n                this.setCookie('spotifyToken', urlParams[0].split('=')[1], urlParams[2].split('=')[1])\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        //initial playlist state\r\n        this.updatePlaylist();\r\n        // playlist update listener\r\n        var filter = {\r\n            topics: [\r\n                ethers.utils.id(\"playlistAltered(address,uint256,uint256,uint256,string,tring)\")\r\n            ]\r\n        }\r\n        playableContract.on(playableContract.filters.playlistAltered, (event) => {\r\n            const spotifyplaylistURL = (\"https://api.spotify.com/v1/playlists/5isvshO0NjjLLsc4AOJnTY/tracks?position=\" + encodeURIComponent(searchValue) + \"&type=track&limit=\" + searchLimit);\r\n            fetch(spotifysearchURL, {\r\n                method: 'POST', \r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                },\r\n            })\r\n            .then((response) => response.json())\r\n            .then((searchResults) => {\r\n                console.log(searchResults);\r\n                let trackInfo = searchResults['tracks'][\"items\"][0];\r\n                playableContract.AddSong(\r\n                    trackInfo['album']['uri'],\r\n                    trackInfo['album']['images'][0]['url'],\r\n                    trackInfo['track_number'],\r\n                    trackInfo['uri'],\r\n                    trackInfo['name'],\r\n                    trackInfo['artists'][0]['name'],\r\n                    '', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', {value: 1000});\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n            console.log(event);\r\n        });\r\n    }\r\n    AddSong(searchValue){\r\n        var searchLimit = 5;\r\n        const spotifysearchURL = (\"https://api.spotify.com/v1/search?q=\" + encodeURIComponent(searchValue) + \"&type=track&limit=\" + searchLimit);\r\n        fetch(spotifysearchURL, {\r\n            method: 'GET', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n        })\r\n        .then((response) => response.json())\r\n        .then((searchResults) => {\r\n            console.log(searchResults);\r\n            let trackInfo = searchResults['tracks'][\"items\"][0];\r\n            playableContract.AddSong(\r\n                trackInfo['album']['uri'],\r\n                trackInfo['album']['images'][0]['url'],\r\n                trackInfo['track_number'],\r\n                trackInfo['uri'],\r\n                trackInfo['name'],\r\n                trackInfo['artists'][0]['name'],\r\n                '', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', {value: 1000});\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n    SpotifyPlay(playlistIdx){\r\n        const spotifyPlaylistID = 'spotify:playlist:5isvshO0NjjLLsc4AOJnTY';\r\n        console.log(JSON.stringify({\r\n            'context_uri': 'spotify:playlist:5isvshO0NjjLLsc4AOJnTY',\r\n            'offset':{'position': `${this.state.playlist[playlistIdx]['trackIndex']}`},\r\n            'position_ms': '0'\r\n        }));\r\n        fetch('https://api.spotify.com/v1/me/player/play', {\r\n            method: 'PUT', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n            body: `{\\\"context_uri\\\":\\\"spotify:playlist:5isvshO0NjjLLsc4AOJnTY\\\",\\\"offset\\\":{\\\"position\\\":${playlistIdx}},\\\"position_ms\\\":0}`,\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            responseJson\r\n        })\r\n        .catch((error) => {\r\n            console.warn(error);\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <View style={styles.container}>\r\n                    <Button \r\n                    onPress={() => {this.AddSong('Ziplock saba')}} \r\n                    title={'Add \\\"Ziplock\\\" By Saba'}\r\n                    color=\"#841584\"\r\n                    />\r\n                    {this.state.playlist.map(({ songID, trackName, trackURI, albumImage, artist }, currIdx) => (\r\n                        <React.Fragment key={songID}>\r\n                            <TouchableOpacity\r\n                                accessibilityRole={'button'}\r\n                                style={styles.linkContainer}\r\n                                onPress={() => this.SpotifyPlay(currIdx)}>\r\n                                <Image\r\n                                    style={styles.tinyLogo}\r\n                                    source={{\r\n                                        uri: albumImage,\r\n                                    }}\r\n                                />\r\n                                <Text style={styles.title}>{trackName + '\\n'}\r\n                                    <Text style={styles.artist}>\r\n                                        {artist}\r\n                                    </Text>\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            <View style={styles.separator} />\r\n                        </React.Fragment>\r\n                    ))}\r\n                </View>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        marginTop: 32,\r\n        paddingHorizontal: 24,\r\n        backgroundColor: \"#223\",\r\n    },\r\n    tinyLogo: {\r\n        width: 50,\r\n        height: 50,\r\n    },\r\n    linkContainer: {\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingVertical: 8,\r\n    },\r\n    link: {\r\n        flex: 2,\r\n        fontSize: 18,\r\n        fontWeight: '400',\r\n        color: '#7700ff',\r\n    },\r\n    title: {\r\n        flex: 3,\r\n        paddingVertical: 12,\r\n        fontWeight: '400',\r\n        fontSize: 16,\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n    },\r\n    artist: {\r\n        flex: 3,\r\n        paddingVertical: 16,\r\n        fontWeight: '400',\r\n        fontSize: 12,\r\n        color: '#aaaaaa',\r\n        textAlign: 'center',\r\n    },\r\n    separator: {\r\n        backgroundColor: '#eeeeee',\r\n        height: 1,\r\n    },\r\n});\r\nexport default Playlist;","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport { SearchBar, Card } from 'react-native-elements';\nimport * as DevMenu from \"expo-dev-menu\";\nimport './global';\nimport Playlist from './PlayableContract.js'\nimport { TextInput } from \"react-native-gesture-handler\";\n\nexport default class App extends React.Component {\n  state = {\n    playlistAddres: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065',\n  };\n\n  updateAddress = (address) => {\n    this.setState({ playlistAddres: address });\n  };\n  \n  render() {\n    return (\n      <View style={styles.container}>\n        <TextInput\n          style={styles.addressinput}\n          onChangeText={this.updateAddress}\n          value={this.state.playlistAddres}\n          placeholder=\"Playlist Eth Address\">\n        </TextInput>\n        <View style={styles.card}>\n          <Playlist/>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: \"#223\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 30\n  },\n  addressinput: {\n    color: \"#ffffff\",\n    flex: 1,\n    width: 'auto',\n    fontSize: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  container: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  buttonContainer: {\n    backgroundColor: \"#4630eb\",\n    borderRadius: 4,\n    padding: 12,\n    marginVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontSize: 32,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}