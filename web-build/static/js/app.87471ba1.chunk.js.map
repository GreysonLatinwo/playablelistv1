{"version":3,"sources":["global.js","PlayableContract.js","App.js","index.js"],"names":["global","Buffer","require","process","btoa","str","toString","atob","b64Encoded","provider","signer","playableContract","PlayableJson","ethers","Playlist","props","state","playlist","accounts","playableAddress","providers","Web3Provider","window","ethereum","getSigner","Contract","networks","address","abi","setCookie","location","hash","urlParams","split","length","fetch","method","headers","getCookie","body","success","data","console","log","userID","id","this","document","getElementById","value","spotifyPlaylistId","error","err","alert","responseJSON","message","UserId","spotifyAuth","cname","name","ca","decodeURIComponent","cookie","i","c","charAt","substring","indexOf","cvalue","seconds","d","Date","setTime","getTime","expires","toUTCString","url","origin","encodeURIComponent","href","GetAll","then","result","JsonResult","JSON","parse","sort","a","b","parseInt","setState","updatePlaylist","on","filters","playlistAltered","event","JSONResults","args","alterType","playableTrackPosition","trackURI","putData","returnValues","xmlhttp","XMLHttpRequest","open","setRequestHeader","send","$","ajax","type","beforeSend","req","dataType","spotifyTrackPosition","items","track","uri","searchValue","spotifysearchURL","response","json","searchResults","trackInfo","AddSong","catch","playlistIdx","stringify","responseJson","warn","Fragment","View","style","styles","container","Button","onPress","title","color","map","currIdx","songID","trackName","albumImage","artist","key","TouchableOpacity","accessibilityRole","linkContainer","SpotifyPlay","Image","tinyLogo","source","Text","separator","React","Component","StyleSheet","create","marginTop","paddingHorizontal","backgroundColor","width","height","flexWrap","flexDirection","justifyContent","alignItems","paddingVertical","link","flex","fontSize","fontWeight","textAlign","App","playlistAddres","updateAddress","addressinput","card","Linking","openURL","borderRadius","borderWidth","buttonContainer","padding","marginVertical","buttonText","registerRootComponent"],"mappings":"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","file":"static/js/app.87471ba1.chunk.js","sourcesContent":["// Inject node globals into React Native global scope.\r\nglobal.Buffer = require('buffer').Buffer;\r\nglobal.process = require('process');\r\n\r\nif (typeof btoa === 'undefined') {\r\n  global.btoa = function (str) {\r\n    return new Buffer(str, 'binary').toString('base64');\r\n  };\r\n}\r\n\r\nif (typeof atob === 'undefined') {\r\n  global.atob = function (b64Encoded) {\r\n    return new Buffer(b64Encoded, 'base64').toString('binary');\r\n  };\r\n}","import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image, Button } from \"react-native\";\r\nimport './global';\r\n\r\nconst PlayableJson = require('./PlayableList.json');\r\nconst Web3 = require('web3');\r\nconst { ethers } = require(\"ethers\");\r\nvar provider;\r\nvar signer; //signer is the address on the metamask account\r\nvar playableContract;\r\n\r\nclass Playlist extends React.Component {\r\n    \r\n    getCookie(cname) {\r\n        var name = cname + \"=\";\r\n        var decodedCookie = decodeURIComponent(document.cookie);\r\n        var ca = decodedCookie.split(';');\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) == ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) == 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n    setCookie(cname, cvalue, seconds) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (seconds * 1000));\r\n        var expires = \"expires=\" + d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n    spotifyAuth() {\r\n        const my_client_id = '9c51eed9e4534dc3b3711c58b43c13c9';\r\n        const scopes = `playlist-read-collaborative \r\n                playlist-read-private \r\n                playlist-modify-private \r\n                playlist-modify-public \r\n                streaming \r\n                user-read-email \r\n                user-read-private \r\n                user-modify-playback-state\r\n                user-read-playback-state\r\n                ugc-image-upload`;\r\n        const redirect_uri = window.location.origin;\r\n        const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${my_client_id}&redirect_uri=${(redirect_uri)}&scope=${encodeURIComponent(scopes)}`\r\n        window.location.href = url;\r\n    }\r\n    updatePlaylist(){\r\n        playableContract.GetAll('0xA54B25a1EA558512DEF1adD7b2b301c16051C065')\r\n        .then((result) => {\r\n            var JsonResult = JSON.parse(result);\r\n            JsonResult.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            this.state.playlist = JsonResult;\r\n            this.setState(JsonResult);\r\n            console.log('ethers');\r\n            console.log(this.state.playlist);\r\n        });\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // Don't call this.setState() here!\r\n        this.state = {\r\n            playlist: [],\r\n            accounts: [],\r\n            playableAddress: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065'\r\n        };\r\n        provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        signer = provider.getSigner();\r\n        playableContract = new ethers.Contract(PlayableJson.networks['3'].address, PlayableJson.abi, signer);\r\n        this.setCookie('PlaylistAddress', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', 3600)\r\n        if (!window.location.hash){\r\n            this.spotifyAuth();\r\n        }else{\r\n            const urlParams = window.location.hash.split('&');\r\n            if(urlParams.length >= 3)\r\n                this.setCookie('spotifyToken', urlParams[0].split('=')[1], urlParams[2].split('=')[1])\r\n            //get user id\r\n            fetch(`https://api.spotify.com/v1/me`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                },\r\n                body: `{\"name\": \"Playable List - 0xA54B25a1EA558512DEF1adD7b2b301c16051C065\",\"description\": \"Playable List\",\"public\": true}`,\r\n                success: function (data) {\r\n                    console.log(\"Data: \" + data);\r\n                    var userID = data.id;\r\n                    //check if they have the playlist and make it\r\n                    fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json',\r\n                            \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                        },\r\n                        body: `{\"name\": \"Playable List - ${document.getElementById('playlist-id').value}\",\"description\": \"Playable List\",\"public\": true}`,\r\n                        success: function (data) {\r\n                            console.log(\"Data: \" + data);\r\n                            if (getCookie(spotifyPlaylistId) == null)\r\n                                setCookie('spotifyPlaylistId', data.id, 1000);\r\n                        }, error: function (err) {\r\n                            console.log(err);\r\n                            alert(err.responseJSON.error.message)\r\n                        }\r\n                    });\r\n                    setCookie(UserId, data.id, 1000);\r\n                }, error: function (err) {\r\n                    console.log(err);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        //initial playlist state\r\n        this.updatePlaylist();\r\n        // playlist update listener\r\n        playableContract.on(playableContract.filters.playlistAltered, (event) => {\r\n            var spotifyPlaylistID = '5isvshO0NjjLLsc4AOJnTY';\r\n            var JSONResults = this.state.playlist\r\n            JSONResults.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            switch (event.args.alterType) {\r\n            case 'add':\r\n                var playableTrackPosition = 0;\r\n                console.log('adding to playlist');\r\n                for (var i = 0; i < JSONResults.length; i++) {\r\n                    if (JSONResults[i].trackURI == event.args.trackURI) {\r\n                        playableTrackPosition = i;\r\n                        break;\r\n                    }\r\n                }\r\n                const spotifyplaylistURL = `https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks?position=${playableTrackPosition}`;\r\n                fetch(spotifyplaylistURL, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                },\r\n                body: `{\"uris\": [\"${event.args.trackURI}\"]}`,\r\n                success: function (data) {\r\n                    console.log(\"Data: \" + data);\r\n                }, error: function (err) {\r\n                    console.log(err);\r\n                    alert(err.responseJSON.error.message)\r\n                }\r\n                });\r\n                break;\r\n            case 'remove':\r\n                console.log('removing from playlist');\r\n                const putData = `{\"tracks\":[{\"uri\": \"${event.returnValues.trackURI}\"}]}`;\r\n                const spotifyURL = (`https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks`);\r\n                const xmlhttp = new XMLHttpRequest();\r\n                xmlhttp.open(\"DELETE\", spotifyURL);\r\n                xmlhttp.setRequestHeader(\"Authorization\", \"Bearer \" + getCookie(\"spotifyToken\"));\r\n                xmlhttp.send(putData);\r\n                break;\r\n            case 'update':\r\n                console.log('updating playlist');\r\n                //get current track positions\r\n                $.ajax({\r\n                type: \"GET\",\r\n                url: `https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks`,\r\n                beforeSend: function (req) { req.setRequestHeader(\"Authorization\", \"Bearer \" + getCookie(\"spotifyToken\")); },\r\n                dataType: \"json\",\r\n                success: function (data) {\r\n                    console.log(\"Data:\", data);\r\n                    var spotifyTrackPosition = 0;\r\n                    var playableTrackPosition = 0;\r\n                    //find track in spotify list //TODO duplicate trackURI check\r\n                    for(var i = 0; i < data.items.length; i++){\r\n                    if(data.items[i].track.uri == event.returnValues.trackURI){\r\n                        spotifyTrackPosition = i;\r\n                        break;\r\n                    }\r\n                    }\r\n                    for (var i = 0; i < JSONResults.length; i++) {\r\n                    if (JSONResults[i].trackURI == event.returnValues.trackURI){\r\n                        playableTrackPosition = i;\r\n                        break;\r\n                    }\r\n                    }\r\n                    $.ajax({\r\n                    type: \"PUT\",\r\n                    url: `https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks`,\r\n                    beforeSend: function (req) { req.setRequestHeader(\"Authorization\", \"Bearer \" + getCookie(\"spotifyToken\")); },\r\n                    dataType: \"json\",\r\n                    data: `{\"range_start\":${spotifyTrackPosition}, \"insert_before\":${playableTrackPosition}}`,\r\n                    success: function (data) {\r\n                        console.log(\"Data: \" + data);\r\n                    }, error: function (err) {\r\n                        console.log(err);\r\n                        alert(err.responseJSON.error.message)\r\n                    }\r\n                    });\r\n                }, error: function (err) {\r\n                    console.log(err);\r\n                    alert(err.responseJSON.error.message)\r\n                }\r\n                });\r\n                break;\r\n            }\r\n            console.log(event);\r\n        });\r\n    }\r\n    AddSong(searchValue){\r\n        var searchLimit = 5;\r\n        const spotifysearchURL = (\"https://api.spotify.com/v1/search?q=\" + encodeURIComponent(searchValue) + \"&type=track&limit=\" + searchLimit);\r\n        fetch(spotifysearchURL, {\r\n            method: 'GET', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n        })\r\n        .then((response) => response.json())\r\n        .then((searchResults) => {\r\n            console.log(searchResults);\r\n            let trackInfo = searchResults['tracks'][\"items\"][0];\r\n            playableContract.AddSong(\r\n                trackInfo['album']['uri'],\r\n                trackInfo['album']['images'][0]['url'],\r\n                trackInfo['track_number'],\r\n                trackInfo['uri'],\r\n                trackInfo['name'],\r\n                trackInfo['artists'][0]['name'],\r\n                '', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', {value: 4000});\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n    SpotifyPlay(playlistIdx){\r\n        const spotifyPlaylistID = 'spotify:playlist:5isvshO0NjjLLsc4AOJnTY';\r\n        console.log(JSON.stringify({\r\n            'context_uri': 'spotify:playlist:5isvshO0NjjLLsc4AOJnTY',\r\n            'offset':{'position': `${this.state.playlist[playlistIdx]['trackIndex']}`},\r\n            'position_ms': '0'\r\n        }));\r\n        fetch('https://api.spotify.com/v1/me/player/play', {\r\n            method: 'PUT', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n            body: `{\\\"context_uri\\\":\\\"spotify:playlist:5isvshO0NjjLLsc4AOJnTY\\\",\\\"offset\\\":{\\\"position\\\":${playlistIdx}},\\\"position_ms\\\":0}`,\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            responseJson\r\n        })\r\n        .catch((error) => {\r\n            console.warn(error);\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <View style={styles.container}>\r\n                    <Button \r\n                    onPress={() => {this.AddSong('get back pop smoke')}} \r\n                    title={'Add \\\"Get Back\\\" By Pop smoke'}\r\n                    color=\"#841584\"\r\n                    />\r\n                    {this.state.playlist.map(({ songID, trackName, trackURI, albumImage, artist }, currIdx) => (\r\n                        <React.Fragment key={songID}>\r\n                            <TouchableOpacity\r\n                                accessibilityRole={'button'}\r\n                                style={styles.linkContainer}\r\n                                onPress={() => this.SpotifyPlay(currIdx)}>\r\n                                <Image\r\n                                    style={styles.tinyLogo}\r\n                                    source={{\r\n                                        uri: albumImage,\r\n                                    }}\r\n                                />\r\n                                <Text style={styles.title}>{trackName + '\\n'}\r\n                                    <Text style={styles.artist}>\r\n                                        {artist}\r\n                                    </Text>\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            <View style={styles.separator} />\r\n                        </React.Fragment>\r\n                    ))}\r\n                </View>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        marginTop: 32,\r\n        paddingHorizontal: 24,\r\n        backgroundColor: \"#223\",\r\n    },\r\n    tinyLogo: {\r\n        width: 50,\r\n        height: 50,\r\n    },\r\n    linkContainer: {\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingVertical: 8,\r\n    },\r\n    link: {\r\n        flex: 2,\r\n        fontSize: 18,\r\n        fontWeight: '400',\r\n        color: '#7700ff',\r\n    },\r\n    title: {\r\n        flex: 3,\r\n        paddingVertical: 12,\r\n        fontWeight: '400',\r\n        fontSize: 16,\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n    },\r\n    artist: {\r\n        flex: 3,\r\n        paddingVertical: 16,\r\n        fontWeight: '400',\r\n        fontSize: 12,\r\n        color: '#aaaaaa',\r\n        textAlign: 'center',\r\n    },\r\n    separator: {\r\n        backgroundColor: '#eeeeee',\r\n        height: 1,\r\n    },\r\n});\r\nexport default Playlist;","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity, Linking, Button } from \"react-native\";\nimport { SearchBar, Card } from 'react-native-elements';\nimport * as DevMenu from \"expo-dev-menu\";\nimport './global';\nimport Playlist from './PlayableContract.js'\nimport { TextInput } from \"react-native-gesture-handler\";\n\nexport default class App extends React.Component {\n  state = {\n    playlistAddres: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065',\n  };\n\n  updateAddress = (address) => {\n    this.setState({ playlistAddres: address });\n  };\n  \n  render() {\n    return (\n      <View style={styles.container}>\n        {\n          (window.ethereum != null)\n          ?\n          <View>\n            <Text style={styles.addressinput}>\n              Playlist: {this.state.playlistAddres}\n            </Text>\n            <View style={styles.card}>\n              <Playlist/>\n            </View>\n          </View>\n          :\n          <View>\n            <Text style={{color: \"#fff\", textAlign: \"center\"}}>Please use a Web3 Provider (that Supports the ropsten testnet)</Text>\n            <Text style={{color: \"#fff\", textAlign: \"center\"}}>i.e. Metamask or CoinBase Wallet</Text>\n            <Button title='Metamask' style={{color: \"#00f\", textAlign: \"center\", fontSize: 18}} onPress={() => Linking.openURL('https://metamask.io')}/>\n          </View>\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: \"#223\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 30,\n    borderWidth: 1,\n    color: \"#fff\"\n  },\n  addressinput: {\n    color: \"#ffffff\",\n    flex: 1,\n    width: 'auto',\n    fontSize: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  container: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  buttonContainer: {\n    backgroundColor: \"#4630eb\",\n    borderRadius: 4,\n    padding: 12,\n    marginVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontSize: 32,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}