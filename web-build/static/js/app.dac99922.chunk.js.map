{"version":3,"sources":["global.js","PlayableContract.js","App.js","index.js"],"names":["global","Buffer","require","process","btoa","str","toString","atob","b64Encoded","PlayableJson","Web3","Playlist","props","state","playlist","setCookie","window","location","hash","urlParams","split","length","spotifyAuth","cname","name","ca","decodeURIComponent","document","cookie","i","c","charAt","substring","indexOf","cvalue","seconds","d","Date","setTime","getTime","expires","toUTCString","url","origin","encodeURIComponent","href","providers","HttpProvider","eth","Contract","abi","networks","address","from","gasPrice","methods","GetAll","call","then","result","JsonResult","JSON","parse","sort","a","b","parseInt","setState","console","log","playlistIdx","stringify","this","fetch","method","headers","getCookie","body","response","json","responseJson","catch","error","warn","Fragment","View","style","styles","container","map","currIdx","songID","trackName","albumImage","trackURI","artist","key","TouchableOpacity","accessibilityRole","linkContainer","onPress","SpotifyPlay","Image","tinyLogo","source","uri","Text","title","separator","React","Component","StyleSheet","create","marginTop","paddingHorizontal","backgroundColor","width","height","flexWrap","flexDirection","justifyContent","alignItems","paddingVertical","link","flex","fontSize","fontWeight","color","textAlign","App","playlistAddres","updateAddress","addressinput","onChangeText","value","placeholder","card","borderRadius","buttonContainer","padding","marginVertical","buttonText","registerRootComponent"],"mappings":"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","file":"static/js/app.dac99922.chunk.js","sourcesContent":["// Inject node globals into React Native global scope.\r\nglobal.Buffer = require('buffer').Buffer;\r\nglobal.process = require('process');\r\n\r\nif (typeof btoa === 'undefined') {\r\n  global.btoa = function (str) {\r\n    return new Buffer(str, 'binary').toString('base64');\r\n  };\r\n}\r\n\r\nif (typeof atob === 'undefined') {\r\n  global.atob = function (b64Encoded) {\r\n    return new Buffer(b64Encoded, 'base64').toString('binary');\r\n  };\r\n}","import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image, Button } from \"react-native\";\r\nimport './global';\r\n\r\nconst PlayableJson = require('./PlayableList.json');\r\nconst Web3 = require('web3');\r\n\r\nclass Playlist extends React.Component {\r\n    getCookie(cname) {\r\n        var name = cname + \"=\";\r\n        var decodedCookie = decodeURIComponent(document.cookie);\r\n        var ca = decodedCookie.split(';');\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) == ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) == 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n      \r\n    setCookie(cname, cvalue, seconds) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (seconds * 1000));\r\n        var expires = \"expires=\" + d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n    spotifyAuth() {\r\n        const my_client_id = '9c51eed9e4534dc3b3711c58b43c13c9';\r\n        const scopes = `playlist-read-collaborative \r\n                playlist-read-private \r\n                playlist-modify-private \r\n                playlist-modify-public \r\n                streaming \r\n                user-read-email \r\n                user-read-private \r\n                user-modify-playback-state\r\n                user-read-playback-state\r\n                ugc-image-upload`;\r\n        const redirect_uri = window.location.origin;\r\n        const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${my_client_id}&redirect_uri=${(redirect_uri)}&scope=${encodeURIComponent(scopes)}`\r\n        window.location.href = url;\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // Don't call this.setState() here!\r\n        this.state = {\r\n            playlist: []\r\n        };\r\n        this.setCookie('PlaylistAddress', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', 3600)\r\n        if (!window.location.hash){\r\n            this.spotifyAuth();\r\n        }else{\r\n            const urlParams = window.location.hash.split('&');\r\n            if(urlParams.length >= 3)\r\n                this.setCookie('spotifyToken', urlParams[0].split('=')[1], urlParams[2].split('=')[1])\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        const web3 = new Web3(\r\n            new Web3.providers.HttpProvider('https://ropsten.infura.io/v3/466820daa9c0476985e1444bb1ced01d')\r\n        );\r\n        var myContract = new web3.eth.Contract(PlayableJson.abi, PlayableJson.networks['3'].address, {\r\n            from: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', // contract address\r\n            gasPrice: '86000000000' // default gas price in wei\r\n        });\r\n        myContract.methods.GetAll('0xA54B25a1EA558512DEF1adD7b2b301c16051C065').call().then((result) => {\r\n            var JsonResult = JSON.parse(result);\r\n            JsonResult.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            this.state.playlist = JsonResult;\r\n            this.setState(JsonResult)\r\n            console.log(this.state.playlist);\r\n        });\r\n    }\r\n    \r\n    SpotifyPlay(playlistIdx){\r\n        const spotifyPlaylistID = 'spotify:playlist:5isvshO0NjjLLsc4AOJnTY';\r\n        console.log(JSON.stringify({\r\n            'context_uri': 'spotify:playlist:5isvshO0NjjLLsc4AOJnTY',\r\n            'offset':{'position': `${this.state.playlist[playlistIdx]['trackIndex']}`},\r\n            'position_ms': '0'\r\n        }));\r\n        fetch('https://api.spotify.com/v1/me/player/play', {\r\n            method: 'PUT', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n            body: `{\\\"context_uri\\\":\\\"spotify:playlist:5isvshO0NjjLLsc4AOJnTY\\\",\\\"offset\\\":{\\\"position\\\":${playlistIdx}},\\\"position_ms\\\":0}`,\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            responseJson\r\n        })\r\n        .catch((error) => {\r\n            console.warn(error);\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <View style={styles.container}>\r\n                    {this.state.playlist.map(({ songID, trackName, trackURI, albumImage, artist }, currIdx) => (\r\n                        <React.Fragment key={songID}>\r\n                            \r\n                            <TouchableOpacity\r\n                                accessibilityRole={'button'}\r\n                                style={styles.linkContainer}\r\n                                onPress={() => this.SpotifyPlay(currIdx)}>\r\n                                <Image\r\n                                    style={styles.tinyLogo}\r\n                                    source={{\r\n                                        uri: albumImage,\r\n                                    }}\r\n                                />\r\n                                <Text style={styles.title}>{trackName + '\\n'}\r\n                                    <Text style={styles.artist}>\r\n                                        {artist}\r\n                                    </Text>\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            <View style={styles.separator} />\r\n                        </React.Fragment>\r\n                    ))}\r\n                </View>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        marginTop: 32,\r\n        paddingHorizontal: 24,\r\n        backgroundColor: \"#223\",\r\n    },\r\n    tinyLogo: {\r\n        width: 50,\r\n        height: 50,\r\n    },\r\n    linkContainer: {\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingVertical: 8,\r\n    },\r\n    link: {\r\n        flex: 2,\r\n        fontSize: 18,\r\n        fontWeight: '400',\r\n        color: '#7700ff',\r\n    },\r\n    title: {\r\n        flex: 3,\r\n        paddingVertical: 12,\r\n        fontWeight: '400',\r\n        fontSize: 16,\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n    },\r\n    artist: {\r\n        flex: 3,\r\n        paddingVertical: 16,\r\n        fontWeight: '400',\r\n        fontSize: 12,\r\n        color: '#aaaaaa',\r\n        textAlign: 'center',\r\n    },\r\n    separator: {\r\n        backgroundColor: '#eeeeee',\r\n        height: 1,\r\n    },\r\n});\r\nexport default Playlist;","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport { SearchBar, Card } from 'react-native-elements';\nimport * as DevMenu from \"expo-dev-menu\";\nimport './global';\nimport Playlist from './PlayableContract.js'\nimport { TextInput } from \"react-native-gesture-handler\";\n\nexport default class App extends React.Component {\n  state = {\n    playlistAddres: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065',\n  };\n\n  updateAddress = (address) => {\n    this.setState({ playlistAddres: address });\n  };\n  \n  render() {\n    return (\n      <View style={styles.container}>\n        <TextInput\n          style={styles.addressinput}\n          onChangeText={this.updateAddress}\n          value={this.state.playlistAddres}\n          placeholder=\"Playlist Eth Address\">\n        </TextInput>\n        <View style={styles.card}>\n          <Playlist/>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: \"#223\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 30\n  },\n  addressinput: {\n    color: \"#ffffff\",\n    flex: 1,\n    width: 'auto',\n    fontSize: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  container: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  buttonContainer: {\n    backgroundColor: \"#4630eb\",\n    borderRadius: 4,\n    padding: 12,\n    marginVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontSize: 32,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}