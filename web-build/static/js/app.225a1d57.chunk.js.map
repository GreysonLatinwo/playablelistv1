{"version":3,"sources":["global.js","PlayableContract.js","App.js","index.js"],"names":["global","Buffer","require","process","btoa","str","toString","atob","b64Encoded","provider","signer","playableContract","PlayableJson","ethers","Playlist","props","spotifySDKCallback","window","onSpotifyWebPlaybackSDKReady","token","getCookie","spotifyPlayer","Spotify","Player","name","getOAuthToken","cb","addListener","state","console","log","currentSong","title","track_window","current_track","artist","artists","image","album","images","url","setState","connect","playlist","accounts","playableAddress","addModalVisibility","ethereum","request","method","then","updatePlaylist","providers","Web3Provider","getSigner","Contract","networks","address","abi","setCookie","location","hash","urlParams","split","length","spotifyAuth","cname","ca","decodeURIComponent","document","cookie","i","c","charAt","substring","indexOf","cvalue","seconds","d","Date","setTime","getTime","expires","toUTCString","visible","this","modalVisible","origin","encodeURIComponent","href","GetAll","result","JsonResult","JSON","parse","sort","a","b","parseInt","JSONResults","tracks2add","index","trackURI","fetch","headers","body","data","catch","error","warn","response","json","spotifyPlaylist","spotifyPlaylistIdCookie","idx","items","findIndex","id","on","filters","playlistAltered","event","spotifyPlaylistID","args","alterType","playableTrackPosition","err","alert","responseJSON","message","putData","spotifyTrackPosition","track","uri","returnValues","updateSpotify","script","createElement","src","async","onload","appendChild","searchValue","spotifysearchURL","searchResults","trackInfo","AddSong","value","playlistIdx","responseJson","Fragment","View","style","styles","container","Button","onPress","color","borderWidth","height","ImageBackground","resizeMode","source","backgroundColor","borderRadius","opacity","Text","map","currIdx","songID","trackName","albumImage","key","TouchableOpacity","accessibilityRole","linkContainer","SpotifyPlay","Image","tinyLogo","separator","React","Component","StyleSheet","create","modalView","margin","padding","alignItems","shadowColor","shadowOffset","width","shadowOpacity","shadowRadius","elevation","button","buttonOpen","buttonClose","textStyle","fontWeight","textAlign","modalText","marginBottom","marginTop","paddingHorizontal","flexWrap","flexDirection","justifyContent","paddingVertical","link","flex","fontSize","App","playlistAddres","updateAddress","addressinput","card","Linking","openURL","buttonContainer","marginVertical","buttonText","registerRootComponent"],"mappings":"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","file":"static/js/app.225a1d57.chunk.js","sourcesContent":["// Inject node globals into React Native global scope.\r\nglobal.Buffer = require('buffer').Buffer;\r\nglobal.process = require('process');\r\n\r\nif (typeof btoa === 'undefined') {\r\n  global.btoa = function (str) {\r\n    return new Buffer(str, 'binary').toString('base64');\r\n  };\r\n}\r\n\r\nif (typeof atob === 'undefined') {\r\n  global.atob = function (b64Encoded) {\r\n    return new Buffer(b64Encoded, 'base64').toString('binary');\r\n  };\r\n}","import { StatusBar } from \"expo-status-bar\";\r\nimport React from \"react\";\r\nimport { StyleSheet, Text, View, TouchableOpacity, Image, Button, ImageBackground} from \"react-native\";\r\nimport './global';\r\n\r\nconst PlayableJson = require('./PlayableList.json');\r\nconst Web3 = require('web3');\r\nconst { ethers } = require(\"ethers\");\r\nvar provider;\r\nvar signer; //signer is the address on the metamask account\r\nvar playableContract;\r\n\r\nclass Playlist extends React.Component {\r\n    \r\n    getCookie(cname) {\r\n        var name = cname + \"=\";\r\n        var decodedCookie = decodeURIComponent(document.cookie);\r\n        var ca = decodedCookie.split(';');\r\n        for (var i = 0; i < ca.length; i++) {\r\n            var c = ca[i];\r\n            while (c.charAt(0) == ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) == 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n    setCookie(cname, cvalue, seconds) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (seconds * 1000));\r\n        var expires = \"expires=\" + d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    }\r\n    setModalVisible(visible) {\r\n        this.setState({ modalVisible: visible });\r\n    }\r\n    spotifyAuth() {\r\n        const my_client_id = '9c51eed9e4534dc3b3711c58b43c13c9';\r\n        const scopes = `playlist-read-collaborative \r\n                playlist-read-private \r\n                playlist-modify-private \r\n                playlist-modify-public \r\n                streaming \r\n                user-read-email \r\n                user-read-private \r\n                user-modify-playback-state\r\n                user-read-playback-state\r\n                ugc-image-upload\r\n                user-read-currently-playing`;\r\n        const redirect_uri = window.location.origin;\r\n        const url = `https://accounts.spotify.com/authorize?response_type=token&client_id=${my_client_id}&redirect_uri=${(redirect_uri)}&scope=${encodeURIComponent(scopes)}`\r\n        window.location.href = url;\r\n    }\r\n    spotifySDKCallback = () => {\r\n        window.onSpotifyWebPlaybackSDKReady = () => {\r\n            const token = this.getCookie('spotifyToken');\r\n            const spotifyPlayer = new Spotify.Player({\r\n                name: 'Playable v2',\r\n                getOAuthToken: cb => { cb(token); }\r\n            });\r\n            \r\n            spotifyPlayer.addListener('player_state_changed', state => {\r\n                console.log(state);\r\n                var currentSong = null\r\n                if(state){\r\n                    currentSong = {\r\n                        title: state.track_window.current_track.name,\r\n                        artist: state.track_window.current_track.artists[0].name,\r\n                        image: state.track_window.current_track.album.images[2].url,\r\n                    }\r\n                }\r\n\r\n                //do things when the state changes\r\n                \r\n                this.setState({currentSong})\r\n            });\r\n            // add event listeners to the player\r\n            this.setState({spotifyPlayer});\r\n            spotifyPlayer.connect()\r\n        }\r\n    }\r\n    updatePlaylist(){\r\n        playableContract.GetAll('0xA54B25a1EA558512DEF1adD7b2b301c16051C065')\r\n        .then((result) => {\r\n            var JsonResult = JSON.parse(result);\r\n            JsonResult.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            this.state.playlist = JsonResult;\r\n            this.setState(JsonResult);\r\n            console.log(this.state.playlist);\r\n        });\r\n    }\r\n    updateSpotify(){\r\n        playableContract.GetAll(this.getCookie('PlaylistAddress'))\r\n        .then((result) => {\r\n            var JSONResults = JSON.parse(result);\r\n            JSONResults.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            var tracks2add = `{\"uris\": [`;\r\n            for (let index = 0; index < JSONResults.length; index++) {\r\n                if (index == JSONResults.length - 1)\r\n                tracks2add += `\"${JSONResults[index].trackURI}\"`;\r\n                else\r\n                tracks2add += `\"${JSONResults[index].trackURI}\", `;\r\n            }\r\n            tracks2add += `]}`;\r\n            var JSONtracks2add = JSON.parse(tracks2add);\r\n            fetch(`https://api.spotify.com/v1/playlists/${this.getCookie('spotifyPlaylistId')}/tracks`, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                },\r\n                body: tracks2add\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n            })\r\n            .catch((error) => {\r\n                console.warn(error);\r\n            });\r\n        });\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        // Don't call this.setState() here!\r\n        this.state = {\r\n            playlist: [],\r\n            accounts: [],\r\n            playableAddress: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065',\r\n            addModalVisibility: false,\r\n        };\r\n        window.ethereum.request({ method: 'eth_requestAccounts' }).then(() => {\r\n            this.updatePlaylist();\r\n        });\r\n        \r\n        provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        signer = provider.getSigner();\r\n        playableContract = new ethers.Contract(PlayableJson.networks['3'].address, PlayableJson.abi, signer);\r\n        this.setCookie('PlaylistAddress', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', 3600)\r\n        if (!window.location.hash){\r\n            this.spotifyAuth();\r\n        }else{\r\n            const urlParams = window.location.hash.split('&');\r\n            if(urlParams.length >= 3)\r\n                this.setCookie('spotifyToken', urlParams[0].split('=')[1], urlParams[2].split('=')[1])\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        //initial playlist state\r\n        this.updatePlaylist();\r\n        fetch(`https://api.spotify.com/v1/me/playlists`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            }\r\n        })\r\n        .then((response) => response.json())\r\n        .then((spotifyPlaylist) => {\r\n            if(spotifyPlaylist.error){\r\n                return;\r\n            }\r\n            console.log(spotifyPlaylist);\r\n            var spotifyPlaylistIdCookie = this.getCookie('spotifyPlaylistId');\r\n            const playablelistFunc = (playlist) => playlist.name == `Playable List - ${this.getCookie('PlaylistAddress')}`\r\n            var idx = spotifyPlaylist.items.findIndex(playablelistFunc);\r\n            if (spotifyPlaylistIdCookie == null || spotifyPlaylistIdCookie !== spotifyPlaylist.items[idx].id){\r\n                this.setCookie('spotifyPlaylistId', spotifyPlaylist.items[idx].id, 3600);\r\n            }\r\n        });\r\n        // playlist update listener\r\n        playableContract.on(playableContract.filters.playlistAltered, (event) => {\r\n            var spotifyPlaylistID = this.getCookie('spotifyPlaylistId');\r\n            var JSONResults = this.state.playlist\r\n            JSONResults.sort((a, b) => parseInt(b['weight']) - parseInt(a['weight']));\r\n            switch (event.args.alterType) {\r\n            case 'add':\r\n                var playableTrackPosition = 0;\r\n                console.log('adding to playlist');\r\n                for (var i = 0; i < JSONResults.length; i++) {\r\n                    if (JSONResults[i].trackURI == event.args.trackURI) {\r\n                        playableTrackPosition = i;\r\n                        break;\r\n                    }\r\n                }\r\n                const spotifyplaylistURL = `https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks?position=${playableTrackPosition}`;\r\n                fetch(spotifyplaylistURL, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                    },\r\n                    body: `{\"uris\": [\"${event.args.trackURI}\"]}`\r\n                })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    console.log(data);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    alert(err.responseJSON.error.message)\r\n                });\r\n                break;\r\n            //Todo\r\n            case 'remove':\r\n                console.log('removing from playlist');\r\n                const putData = `{\"tracks\":[{\"uri\": \"${event.trackURI}\"}]}`;\r\n                const spotifyURL = (`https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks`);\r\n                fetch(spotifyURL, {\r\n                    method: \"DELETE\",\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                    },\r\n                    body: putData\r\n                })\r\n                .then((response) => response.json())\r\n                .then((data) => {\r\n                    console.log(data);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    alert(err.responseJSON.error.message)\r\n                });\r\n                break;\r\n            //Todo\r\n            case 'update':\r\n                console.log('updating playlist');\r\n                //get current track positions\r\n                fetch(`https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                    }\r\n                })\r\n                .then((data) => {\r\n                    console.log(\"Data:\", data);\r\n                    var spotifyTrackPosition = 0;\r\n                    //find track in spotify list //TODO duplicate trackURI check\r\n                    for(var i = 0; i < data.items.length; i++){\r\n                        if(data.items[i].track.uri == event.returnValues.trackURI){\r\n                            spotifyTrackPosition = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    fetch(`https://api.spotify.com/v1/playlists/${spotifyPlaylistID}/tracks`, {\r\n                        method: \"PUT\",\r\n                        headers: {\r\n                            'Accept': 'application/json',\r\n                            'Content-Type': 'application/json',\r\n                            \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n                        },\r\n                        body: `{\"range_start\":${spotifyTrackPosition}, \"insert_before\":${playableTrackPosition}}`\r\n                    })\r\n                    .then((data) => {\r\n                        console.log(\"Data: \" + data);\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                        alert(err.responseJSON.error.message)\r\n                    })\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                    alert(err.responseJSON.error.message)\r\n                })\r\n                break;\r\n            }\r\n            console.log(event);\r\n            this.updateSpotify();\r\n        });\r\n    }\r\n    componentDidMount(){\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\r\n        script.async = true;\r\n        script.onload = this.spotifySDKCallback;\r\n        document.body.appendChild(script);\r\n    }\r\n    AddSong(searchValue){\r\n        var searchLimit = 5;\r\n        const spotifysearchURL = (\"https://api.spotify.com/v1/search?q=\" + encodeURIComponent(searchValue) + \"&type=track&limit=\" + searchLimit);\r\n        fetch(spotifysearchURL, {\r\n            method: 'GET', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n        })\r\n        .then((response) => response.json())\r\n        .then((searchResults) => {\r\n            console.log(searchResults);\r\n            let trackInfo = searchResults['tracks'][\"items\"][0];\r\n            playableContract.AddSong(\r\n                trackInfo['album']['uri'],\r\n                trackInfo['album']['images'][0]['url'],\r\n                trackInfo['track_number'],\r\n                trackInfo['uri'],\r\n                trackInfo['name'],\r\n                trackInfo['artists'][0]['name'],\r\n                '', '0xA54B25a1EA558512DEF1adD7b2b301c16051C065', {value: 4000})\r\n                .then(result => {\r\n                    console.log(result);\r\n                });\r\n        })\r\n        .catch((error) => {\r\n            console.error(error);\r\n        });\r\n    }\r\n    SpotifyPlay(playlistIdx){\r\n        fetch('https://api.spotify.com/v1/me/player/play', {\r\n            method: 'PUT', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.getCookie(\"spotifyToken\")\r\n            },\r\n            body: `{\\\"context_uri\\\":\\\"spotify:playlist:${this.getCookie('spotifyPlaylistId')}\\\",\\\"offset\\\":{\\\"position\\\":${playlistIdx}},\\\"position_ms\\\":0}`,\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            console.log(responseJson);\r\n        })\r\n        .catch((error) => {\r\n            console.warn(error);\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <View style={styles.container}>\r\n                    <Button \r\n                    onPress={() => {this.AddSong('skegee jid')}} \r\n                    title={'Add skegee jid'}\r\n                    color=\"#841584\"\r\n                    />\r\n                    {\r\n                        this.state.currentSong &&\r\n                        <View style={{borderWidth: 1, height: 320}}>\r\n                            <ImageBackground\r\n                                style={{resizeMode: 'cover', height: 320}}\r\n                                source={{\r\n                                    uri: this.state.currentSong.image,\r\n                                }}> \r\n                                <View style={{backgroundColor: '#222', borderRadius: 20, opacity: 0.8}}>\r\n                                    <Text style={styles.title}>\r\n                                        {this.state.currentSong.title + '\\n'}\r\n                                        <Text style={styles.artist}>\r\n                                            {this.state.currentSong.artist}\r\n                                        </Text>\r\n                                    </Text>\r\n                                </View>\r\n                            </ImageBackground>\r\n                        </View>\r\n                    }\r\n                    {this.state.playlist.map(({ songID, trackName, albumImage, artist }, currIdx) => (\r\n                        <React.Fragment key={songID}>\r\n                            <TouchableOpacity\r\n                                accessibilityRole={'button'}\r\n                                style={styles.linkContainer}\r\n                                onPress={() => this.SpotifyPlay(currIdx)}>\r\n                                <Image\r\n                                    style={styles.tinyLogo}\r\n                                    source={{\r\n                                        uri: albumImage,\r\n                                    }}\r\n                                />\r\n                                <Text style={styles.title}>{trackName + '\\n'}\r\n                                    <Text style={styles.artist}>\r\n                                        {artist}\r\n                                    </Text>\r\n                                </Text>\r\n                            </TouchableOpacity>\r\n                            <View style={styles.separator} />\r\n                        </React.Fragment>\r\n                    ))}\r\n                </View>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nconst styles = StyleSheet.create({\r\n    modalView: {\r\n        margin: 20,\r\n        backgroundColor: \"white\",\r\n        borderRadius: 20,\r\n        padding: 35,\r\n        alignItems: \"center\",\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n          width: 0,\r\n          height: 2\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 4,\r\n        elevation: 5\r\n      },\r\n      button: {\r\n        borderRadius: 20,\r\n        padding: 10,\r\n        elevation: 2\r\n      },\r\n      buttonOpen: {\r\n        backgroundColor: \"#F194FF\",\r\n      },\r\n      buttonClose: {\r\n        backgroundColor: \"#2196F3\",\r\n      },\r\n      textStyle: {\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\"\r\n      },\r\n      modalText: {\r\n        marginBottom: 15,\r\n        textAlign: \"center\"\r\n      }\r\n      ,\r\n    container: {\r\n        marginTop: 32,\r\n        paddingHorizontal: 24,\r\n        backgroundColor: \"#223\",\r\n    },\r\n    tinyLogo: {\r\n        width: 50,\r\n        height: 50,\r\n    },\r\n    linkContainer: {\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        paddingVertical: 8,\r\n    },\r\n    link: {\r\n        flex: 2,\r\n        fontSize: 18,\r\n        fontWeight: '400',\r\n        color: '#7700ff',\r\n    },\r\n    title: {\r\n        flex: 3,\r\n        paddingVertical: 12,\r\n        fontWeight: '400',\r\n        fontSize: 16,\r\n        color: '#fff',\r\n        textAlign: 'center',\r\n    },\r\n    artist: {\r\n        flex: 3,\r\n        paddingVertical: 16,\r\n        fontWeight: '400',\r\n        fontSize: 12,\r\n        color: '#aaaaaa',\r\n        textAlign: 'center',\r\n    },\r\n    separator: {\r\n        backgroundColor: '#eeeeee',\r\n        height: 1,\r\n    },\r\n});\r\nexport default Playlist;","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity, Linking, Button } from \"react-native\";\nimport { SearchBar, Card } from 'react-native-elements';\nimport * as DevMenu from \"expo-dev-menu\";\nimport './global';\nimport Playlist from './PlayableContract.js'\nimport { TextInput } from \"react-native-gesture-handler\";\n\nexport default class App extends React.Component {\n  state = {\n    playlistAddres: '0xA54B25a1EA558512DEF1adD7b2b301c16051C065',\n  };\n\n  updateAddress = (address) => {\n    this.setState({ playlistAddres: address });\n  };\n  \n  render() {\n    return (\n      <View style={styles.container}>\n        {\n          (window.ethereum != null)\n          ?\n          <View>\n            <Text style={styles.addressinput}>\n              Playlist: {this.state.playlistAddres}\n            </Text>\n            <View style={styles.card}>\n              <Playlist/>\n            </View>\n          </View>\n          :\n          <View>\n            <Text style={{color: \"#fff\", textAlign: \"center\"}}>Please use a Web3 Provider (that Supports the ropsten testnet)</Text>\n            <Text style={{color: \"#fff\", textAlign: \"center\"}}>i.e. Metamask or CoinBase Wallet</Text>\n            <Button title='Metamask' style={{color: \"#00f\", textAlign: \"center\", fontSize: 18}} onPress={() => Linking.openURL('https://metamask.io')}/>\n          </View>\n        }\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    backgroundColor: \"#223\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 30,\n    borderWidth: 1,\n    color: \"#fff\"\n  },\n  addressinput: {\n    color: \"#ffffff\",\n    flex: 1,\n    width: 'auto',\n    fontSize: 24,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  container: {\n    flex: 1,\n    backgroundColor: \"#222\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  buttonContainer: {\n    backgroundColor: \"#4630eb\",\n    borderRadius: 4,\n    padding: 12,\n    marginVertical: 10,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  buttonText: {\n    color: \"#ffffff\",\n    fontSize: 32,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}